@model FirstChoiceApp.Models.Sale

@{
    ViewBag.Title = "Create";
}

<style>
    .stock{
        font-weight:bolder;
        color:red;
        background-color:white;
        text-align:center;
    }
</style>

<p class="page-title">Sale Product</p>
<hr class="hr-title" />
<br />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-vertical">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <table>
            <tr style="font-weight:bold;">
                <td>Sale Type</td>
                <td>Customer Name</td>
                <td>Due Amount</td>
                <td>Invoice No.</td>
                <td>Sale Date</td>
            </tr>
            <tr>
                <td>
                    @Html.DropDownListFor(model => model.SaleType, new List<SelectListItem>
                        {
                          new SelectListItem{ Text = "Sale", Value = "1" },
                          new SelectListItem{ Text = "Return Sale", Value = "2" }
                        }, new { @class = "ddl-style", @style = "width:150px;" })
                </td>
                <td>
                    @Html.DropDownListFor(model => model.CustomerId, new SelectList(ViewBag.CustomerList, "Id", "CustomerName"), "--Select Customer--", new { @class = "ddl-style" })
                </td>
                <td>
                    @Html.Editor("DueAmount", new { htmlAttributes = new { @style = "width:120px;", @class = "DueAmount", @readonly = "readonly" } })
                </td>
                <td>
                    @Html.EditorFor(model => model.InvoiceNo, new { htmlAttributes = new { @style = "width:120px;", @disabled = "true" } })
                </td>
                <td>
                    @Html.EditorFor(model => model.SaleDate, new { htmlAttributes = new { @style = "width:150px;", @class = "datePicker", @Value = DateTime.Now.ToString("d MMM, yyyy") } })
                </td>
            </tr>
            <tr>
                <td>
                    @Html.ValidationMessageFor(model => model.SaleType, "", new { @class = "text-danger" })
                </td>
                <td>
                    @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                </td>
                <td></td>
                <td>
                    @Html.ValidationMessageFor(model => model.SaleDate, "", new { @class = "text-danger" })
                </td>
            </tr>
        </table>
        <table>
            <tr style="font-weight:bold;">
                <td>Total Amount</td>
                <td>Paid Amount</td>
                <td>Discount</td>
                <td>Current Due</td>
                <td>Total Due</td>
                <td></td>
            </tr>
            <tr>
                <td>
                    @Html.EditorFor(model => model.TotalAmount, new { htmlAttributes = new { @style = "width:120px;", @readonly = "readonly" } })
                </td>
                <td>
                    @Html.EditorFor(model => model.PaidAmount, new { htmlAttributes = new { @style = "width:120px;" } })
                </td>
                <td>
                    @Html.EditorFor(model => model.DiscountAmount, new { htmlAttributes = new { @style = "width:120px;" } })
                </td>
                <td>
                    @Html.Editor("CurrentDue", new { htmlAttributes = new { @style = "width:120px;", @readonly = "readonly" } })
                </td>
                <td>
                    @Html.Editor("TotalDue", new { htmlAttributes = new { @style = "width:120px;", @readonly = "readonly" } })
                </td>
                <td>
                    <input type="submit" value="Create" class="btn btn-primary" />
                </td>
            </tr>
            <tr>
                <td>
                    @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
                </td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </table>
    </div>
}

<span style="color: red; font-weight: bold;">@ViewBag.Error</span>
<span style="color: green; font-weight: bold;">@ViewBag.Message</span>

<hr style="background-color:green; height:2px; margin:10px 0;" />


<table>
    <tr style="font-weight:bold;">
        <td>Product Name</td>
        <td>Product Code</td>
        <td>Stock</td>
        <td>Quantity</td>
        <td>Sale Price</td>
        <td>Total Price</td>
        <td></td>
    </tr>
    <tr>
        <td>
            @Html.DropDownList("ProductId", new SelectList(ViewBag.ProductList, "Id", "ProductName"), "--Select Product--", new { @style = "width:220px; height:26px;" })
        </td>
        <td>
            @Html.TextBox("ProductCode", "", new { @style = "width:100px;" })
        </td>
        <td>
            @Html.TextBox("Stock", "", new { @style = "width:100px;", @disabled = "true", @class = "stock" })
        </td>
        <td>
            @Html.TextBox("Quantity", "", new { @style = "width:100px;" })
        </td>
        <td>
            @Html.TextBox("SaleRate", "", new { @style = "width:100px;" })
        </td>
        <td>
            @Html.TextBox("TotalPrice", "", new { @style = "width:100px;", @readonly = "readonly" })
        </td>
        <td>
            <input type="button" id="btnSubmit" value="Add" />
        </td>
    </tr>
    <tr>
        <td></td>
        <td></td>
        <td></td>
        <td>
            <label id="errorQuantity" class="field-validation-error"></label>
        </td>
        <td>
            <label id="errorSaleRate" class="field-validation-error"></label>
        </td>
        <td></td>
        <td></td>
    </tr>
</table>

<table style="width: 80%" id="ViewSaleDetail" class="table table-striped">
    <tr style="background-color: #e9e9e9; height:30px;">
        <th>Product</th>
        <th>Quantity</th>
        <th>Sale Price</th>
        <th>Total Price</th>
    </tr>
    <tr>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
    </tr>
</table>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <link href="~/Content/jquery-ui.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-ui.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {

            $(function () {
                $(".datePicker").datepicker({ dateFormat: 'd M, yy', type: Text });
            });


            $("#InvoiceNo").change(function () {
                if ($("#SaleType").val() == 2) {
                    var invoiceNo = $("#InvoiceNo").val();
                    $('#ProductId').empty();
                    $("#ProductId").append('<option value="">' + "--Select Product--" + '</option>');

                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("GetProduct", "Sale")',
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({ invoiceNo: invoiceNo }),

                        success: function (productList) {
                            $('#ProductId').empty();
                            $("#ProductId").append('<option value="">' + "--Select Product--" + '</option>');
                            $.each(productList, function (key, value) {
                                $("#ProductId").append('<option value=' + value.Id + '>' + value.ProductName + '</option>');
                            });
                        },
                    });
                }
            });

            $("#errorQuantity").hide();
            $("#errorSaleRate").hide();

            $("#btnSubmit").on("click", function () {
                var productId = $("#ProductId").val();
                var productName = $("#ProductId option:selected").text();
                var quantity = $("#Quantity").val();
                var purchaseRate = $("#PurchaseRate").val();
                var saleRate = $("#SaleRate").val();

                $("#errorQuantity").hide();
                $("#errorRate").hide();

                if (quantity == "") {
                    $("#errorQuantity").show();
                    $("#errorQuantity").text("Required");
                }

                if (saleRate == "") {
                    $("#errorSaleRate").show();
                    $("#errorSaleRate").text("Required");
                }

                $("#TotalAmount").val();

                $("#ViewSaleDetail").empty();
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("SaleDetails", "Sale")',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ productId: productId, quantity: quantity, saleRate: saleRate, productName: productName }),

                    success: function (saleDetail) {
                        $("#ViewSaleDetail").append('<tr style="background-color: #e9e9e9; height:30px; "><th>Product</th><th>Quantity</th><th>Sale Price</th><th>Product Total</th></tr>');

                        $("#TotalAmount").val(saleDetail.totalAmount);
                        $("#CurrentDue").val(CurrentDue());
                        $("#TotalDue").val(TotalDue());
                        $("#PaidAmount").val(0);

                        $.each(saleDetail.list, function (key, value) {
                            $("#ViewSaleDetail").append('<tr><td>' + value.ProductName + '</td><td>' + value.Quantity + '</td><td>' + value.SaleRate + '</td><td>' + value.Quantity * value.SaleRate + '</td></tr>');
                        });
                    },
                    error: function (saleDetail) {
                        $("#ViewSaleDetail").append('<tr style="background-color: #e9e9e9; height:30px; "><th>Product</th><th>Quantity</th><th>Sale Price</th><th>Product Total</th></tr>');
                    },
                });
            });

            $("#InvoiceNo").autocomplete({
                source: function (request, response) {
                    if ($("#SaleType").val() == 2) {
                        $.ajax({
                            url: '@Url.Action("AutoComplete", "Sale")',
                            type: "POST",
                            dataType: "json",
                            data: { Prefix: request.term, customerId: $("#CustomerId").val() },
                            success: function (data) {
                                response($.map(data, function (item) {
                                    return { label: item.InvoiceNo, value: item.InvoiceNo };
                                }))
                            }
                        })
                    }
                },
                messages: {
                    noResults: "", results: ""
                }
            });

            $("#SaleType").change(function () {
                if ($("#SaleType").val() == 2) {
                    $("#PaidAmount").val(0);
                    $("#DiscountAmount").val(0);
                }
            });

            $("#SaleType").change(function () {
                if ($("#SaleType").val() == 1) {
                    $("#InvoiceNo").attr('disabled', true);
                } else if ($("#SaleType").val() == 2) {
                    $("#InvoiceNo").attr('disabled', false);
                }
            });

            $("#CustomerId").change(function() {
                var customerId = $("#CustomerId").val();
                var purchaseType = $("#PurchaseType").val();

                $("#DiscountAmount").val(0);

                if (customerId == 0) {
                    $("#DueAmount").val(0);

                    $("#CurrentDue").val(CurrentDue());
                    $("#TotalDue").val(TotalDue());
                }

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("GetCustomerDue", "Sale")',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ customerId: customerId }),

                    success: function (supplierDue) {
                        $("#DueAmount").val(supplierDue);

                        $("#CurrentDue").val(CurrentDue());
                        $("#TotalDue").val(TotalDue());
                    },
                });
            });

            if ($("#CustomerId").val() == 0) {
                $("#DueAmount").val(0);

                $("#CurrentDue").val(CurrentDue());
                $("#TotalDue").val(TotalDue());
            }

            $("#ProductId").change(function() {
                var productId = $("#ProductId").val();

                $('#ProductCode').val("");
                $('#Quantity').val("");
                $('#PurchaseRate').val("");
                $('#SaleRate').val("");
                $('#TotalPrice').val("");

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("GetProductById", "Sale")',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ productId: productId }),

                    success: function (objProduct) {
                        $("#ProductCode").val(objProduct.ProductCode);
                        $("#Stock").val(objProduct.Stock);
                        $("#SaleRate").val(objProduct.Price);
                    },
                });
            });

            $("#ProductCode").change(function() {
                var productCode = $("#ProductCode").val();

                $("#ProductId").val($("#ProductId option:first").val());
                $('#Quantity').val("");
                $('#PurchaseRate').val("");
                $('#SaleRate').val("");
                $('#TotalPrice').val("");

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("GetProductByCode", "Sale")',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ productCode: productCode }),

                    success: function (objProduct) {
                        $("#ProductId").val(objProduct.Id);
                        $("#Stock").val(objProduct.Stock);
                        $("#SaleRate").val(objProduct.Price);
                    },
                });
            });

            $("#Quantity").change(function () {
                var stock = parseFloat($("input[name='Stock']").val());
                var quantity = parseFloat($("input[name='Quantity']").val());

                if (quantity > stock) {
                    $("#Quantity").val(0);
                    alert("Quantity is more than Stock!");
                }
            });

            $("#SaleRate").change(function () {
                var purchaseRate = parseFloat($("input[name='PurchaseRate']").val());
                var saleRate = parseFloat($("input[name='SaleRate']").val());

                if (purchaseRate > saleRate) {
                    alert("Invalid Sale Rate");
                }
            });

            //Total Price Calculation In Purchase Details
            $("#PurchaseRate").attr('disabled', true);

            $("#Quantity").keyup(function () {
                    $("#TotalPrice").val(TotalPrice());
            });

            $("#SaleRate").keyup(function () {
                    $("#TotalPrice").val(TotalPrice());
            });

            function TotalPrice() {
                var quantity = $("#Quantity").val();
                var salePrice = $("#SaleRate").val();
                return quantity * salePrice;
            }

            //Current Due Calculation
            $("#TotalAmount").keyup(function () {
                $("#CurrentDue").val(CurrentDue());
                $("#TotalDue").val(TotalDue());
            });

            $("#PaidAmount").keyup(function () {
                $("#CurrentDue").val(CurrentDue());
                $("#TotalDue").val(TotalDue());
            });

            $("#DiscountAmount").keyup(function () {
                $("#CurrentDue").val(CurrentDue());
                $("#TotalDue").val(TotalDue());
            });

            function CurrentDue() {
                var totalAmount = parseFloat($("input[name='TotalAmount']").val());
                var paidAmount = $("#PaidAmount").val();
                var discountAmount = $("#DiscountAmount").val();
                var dueAmount = totalAmount - paidAmount;

                return dueAmount - discountAmount;
            }

            //Total Due Calculation

            function TotalDue() {
                var supplierDue = parseFloat($("input[name='DueAmount']").val());
                var currentDue = parseFloat($("input[name='CurrentDue']").val());

                return supplierDue + currentDue;
            }
        });

    </script>
}

